// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"sync"

	"github.com/mdelillo/credhub-fs/test/fake-credhub/credentials"
)

type FakeCredentialStore struct {
	GetByNameStub        func(string) (credentials.Credential, bool)
	getByNameMutex       sync.RWMutex
	getByNameArgsForCall []struct {
		arg1 string
	}
	getByNameReturns struct {
		result1 credentials.Credential
		result2 bool
	}
	getByNameReturnsOnCall map[int]struct {
		result1 credentials.Credential
		result2 bool
	}
	GetByPathStub        func(string) []credentials.Credential
	getByPathMutex       sync.RWMutex
	getByPathArgsForCall []struct {
		arg1 string
	}
	getByPathReturns struct {
		result1 []credentials.Credential
	}
	getByPathReturnsOnCall map[int]struct {
		result1 []credentials.Credential
	}
	SetStub        func(credentials.Credential)
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		arg1 credentials.Credential
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredentialStore) GetByName(arg1 string) (credentials.Credential, bool) {
	fake.getByNameMutex.Lock()
	ret, specificReturn := fake.getByNameReturnsOnCall[len(fake.getByNameArgsForCall)]
	fake.getByNameArgsForCall = append(fake.getByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetByName", []interface{}{arg1})
	fake.getByNameMutex.Unlock()
	if fake.GetByNameStub != nil {
		return fake.GetByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredentialStore) GetByNameCallCount() int {
	fake.getByNameMutex.RLock()
	defer fake.getByNameMutex.RUnlock()
	return len(fake.getByNameArgsForCall)
}

func (fake *FakeCredentialStore) GetByNameCalls(stub func(string) (credentials.Credential, bool)) {
	fake.getByNameMutex.Lock()
	defer fake.getByNameMutex.Unlock()
	fake.GetByNameStub = stub
}

func (fake *FakeCredentialStore) GetByNameArgsForCall(i int) string {
	fake.getByNameMutex.RLock()
	defer fake.getByNameMutex.RUnlock()
	argsForCall := fake.getByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredentialStore) GetByNameReturns(result1 credentials.Credential, result2 bool) {
	fake.getByNameMutex.Lock()
	defer fake.getByNameMutex.Unlock()
	fake.GetByNameStub = nil
	fake.getByNameReturns = struct {
		result1 credentials.Credential
		result2 bool
	}{result1, result2}
}

func (fake *FakeCredentialStore) GetByNameReturnsOnCall(i int, result1 credentials.Credential, result2 bool) {
	fake.getByNameMutex.Lock()
	defer fake.getByNameMutex.Unlock()
	fake.GetByNameStub = nil
	if fake.getByNameReturnsOnCall == nil {
		fake.getByNameReturnsOnCall = make(map[int]struct {
			result1 credentials.Credential
			result2 bool
		})
	}
	fake.getByNameReturnsOnCall[i] = struct {
		result1 credentials.Credential
		result2 bool
	}{result1, result2}
}

func (fake *FakeCredentialStore) GetByPath(arg1 string) []credentials.Credential {
	fake.getByPathMutex.Lock()
	ret, specificReturn := fake.getByPathReturnsOnCall[len(fake.getByPathArgsForCall)]
	fake.getByPathArgsForCall = append(fake.getByPathArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetByPath", []interface{}{arg1})
	fake.getByPathMutex.Unlock()
	if fake.GetByPathStub != nil {
		return fake.GetByPathStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getByPathReturns
	return fakeReturns.result1
}

func (fake *FakeCredentialStore) GetByPathCallCount() int {
	fake.getByPathMutex.RLock()
	defer fake.getByPathMutex.RUnlock()
	return len(fake.getByPathArgsForCall)
}

func (fake *FakeCredentialStore) GetByPathCalls(stub func(string) []credentials.Credential) {
	fake.getByPathMutex.Lock()
	defer fake.getByPathMutex.Unlock()
	fake.GetByPathStub = stub
}

func (fake *FakeCredentialStore) GetByPathArgsForCall(i int) string {
	fake.getByPathMutex.RLock()
	defer fake.getByPathMutex.RUnlock()
	argsForCall := fake.getByPathArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredentialStore) GetByPathReturns(result1 []credentials.Credential) {
	fake.getByPathMutex.Lock()
	defer fake.getByPathMutex.Unlock()
	fake.GetByPathStub = nil
	fake.getByPathReturns = struct {
		result1 []credentials.Credential
	}{result1}
}

func (fake *FakeCredentialStore) GetByPathReturnsOnCall(i int, result1 []credentials.Credential) {
	fake.getByPathMutex.Lock()
	defer fake.getByPathMutex.Unlock()
	fake.GetByPathStub = nil
	if fake.getByPathReturnsOnCall == nil {
		fake.getByPathReturnsOnCall = make(map[int]struct {
			result1 []credentials.Credential
		})
	}
	fake.getByPathReturnsOnCall[i] = struct {
		result1 []credentials.Credential
	}{result1}
}

func (fake *FakeCredentialStore) Set(arg1 credentials.Credential) {
	fake.setMutex.Lock()
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		arg1 credentials.Credential
	}{arg1})
	fake.recordInvocation("Set", []interface{}{arg1})
	fake.setMutex.Unlock()
	if fake.SetStub != nil {
		fake.SetStub(arg1)
	}
}

func (fake *FakeCredentialStore) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakeCredentialStore) SetCalls(stub func(credentials.Credential)) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = stub
}

func (fake *FakeCredentialStore) SetArgsForCall(i int) credentials.Credential {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	argsForCall := fake.setArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredentialStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getByNameMutex.RLock()
	defer fake.getByNameMutex.RUnlock()
	fake.getByPathMutex.RLock()
	defer fake.getByPathMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredentialStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
